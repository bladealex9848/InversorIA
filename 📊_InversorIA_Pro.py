import os
import time
import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import traceback
import pytz
import json
import importlib
import sys
import requests
import openai

# Importar componentes personalizados
try:
    from market_utils import (
        fetch_market_data,
        TechnicalAnalyzer,
        OptionsParameterManager,
        get_market_context,
        get_vix_level,
        clear_cache,
    )
except Exception as e:
    st.error(f"Error importando market_utils: {str(e)}")

try:
    from trading_dashboard import (
        render_dashboard,
        render_technical_tab,
        render_options_tab,
        render_multiframe_tab,
        render_fundamental_tab,
        render_report_tab,
        render_risk_tab,
        TIMEFRAMES,
    )
except Exception as e:
    st.error(f"Error importando trading_dashboard: {str(e)}")

# Importar sistema de autenticaci√≥n
try:
    from authenticator import check_password, validate_session, clear_session
except Exception as e:
    st.error(f"Error importando authenticator: {str(e)}")

# Importar utilidades de OpenAI
try:
    from openai_utils import process_tool_calls, tools
except Exception as e:
    st.error(f"Error importando openai_utils: {str(e)}")

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="InversorIA Pro",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Universo de Trading
SYMBOLS = {
    "√çndices": ["SPY", "QQQ", "DIA", "IWM", "EFA", "VWO", "IYR", "XLE", "XLF", "XLV"],
    "Tecnolog√≠a": [
        "AAPL",
        "MSFT",
        "GOOGL",
        "AMZN",
        "TSLA",
        "NVDA",
        "META",
        "NFLX",
        "PYPL",
        "CRM",
    ],
    "Finanzas": ["JPM", "BAC", "WFC", "C", "GS", "MS", "V", "MA", "AXP", "BLK"],
    "Energ√≠a": ["XOM", "CVX", "SHEL", "TTE", "COP", "EOG", "PXD", "DVN", "MPC", "PSX"],
    "Salud": ["JNJ", "UNH", "PFE", "MRK", "ABBV", "LLY", "AMGN", "BMY", "GILD", "TMO"],
    "Consumo Discrecional": [
        "MCD",
        "SBUX",
        "NKE",
        "TGT",
        "HD",
        "LOW",
        "TJX",
        "ROST",
        "CMG",
        "DHI",
    ],
    "Cripto ETFs": ["BITO", "GBTC", "ETHE", "ARKW", "BLOK"],
    "Materias Primas": ["GLD", "SLV", "USO", "UNG", "CORN", "SOYB", "WEAT"],
    "Bonos": ["AGG", "BND", "IEF", "TLT", "LQD", "HYG", "JNK", "TIP", "MUB", "SHY"],
    "Inmobiliario": [
        "VNQ",
        "XLRE",
        "IYR",
        "REIT",
        "HST",
        "EQR",
        "AVB",
        "PLD",
        "SPG",
        "AMT",
    ],
}

# =================================================
# CONFIGURACI√ìN DE OPENAI
# =================================================


def setup_openai():
    """Configura credenciales de OpenAI"""
    try:
        API_KEY = os.environ.get("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY")
        ASSISTANT_ID = os.environ.get("ASSISTANT_ID") or st.secrets.get("ASSISTANT_ID")

        if not API_KEY:
            st.warning(
                "‚ö†Ô∏è La API key de OpenAI no est√° configurada. El chat funcionar√° en modo limitado."
            )
            return None, None

        if not ASSISTANT_ID:
            st.warning(
                "‚ö†Ô∏è El ID del asistente no est√° configurado. El chat funcionar√° en modo limitado."
            )
            return API_KEY, None

        openai.api_key = API_KEY
        return API_KEY, ASSISTANT_ID

    except Exception as e:
        st.error(f"Error configurando OpenAI: {str(e)}")
        return None, None


# =================================================
# VERIFICACI√ìN DE APIS Y LIBRER√çAS
# =================================================


def check_api_keys():
    """Verifica las API keys disponibles en secret.toml o env vars"""
    apis_status = {}

    # Verificar API keys comunes para datos financieros
    keys_to_check = [
        "alpha_vantage_api_key",
        "finnhub_api_key",
        "marketstack_api_key",
        "openai_api_key",
        "assistant_id",
    ]

    for key in keys_to_check:
        # Intentar obtener desde Streamlit secrets
        try:
            value = st.secrets.get(key, os.environ.get(key.upper(), ""))
            is_present = bool(value)

            # Mostrar solo una indicaci√≥n de si est√° presente, no el valor real
            apis_status[key] = {
                "status": "‚úÖ Disponible" if is_present else "‚ùå No configurada",
                "source": (
                    "Streamlit secrets"
                    if key in st.secrets
                    else (
                        "Variables de entorno"
                        if key.upper() in os.environ
                        else "No encontrada"
                    )
                ),
            }
        except Exception as e:
            apis_status[key] = {
                "status": "‚ùå Error accediendo",
                "source": f"Error: {str(e)}",
            }

    # Verificar si se puede acceder a APIs externas
    api_endpoints = {
        "Alpha Vantage": "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo",
        "Yahoo Finance": "https://query1.finance.yahoo.com/v8/finance/chart/AAPL?interval=1d",
        "Finnhub": "https://finnhub.io/api/v1/quote?symbol=AAPL&token=demo",
    }

    for name, url in api_endpoints.items():
        try:
            response = requests.get(url, timeout=5)
            status_code = response.status_code
            apis_status[name] = {
                "status": (
                    "‚úÖ Accesible" if status_code == 200 else f"‚ö†Ô∏è Error {status_code}"
                ),
                "response_time": f"{response.elapsed.total_seconds():.2f}s",
            }
        except Exception as e:
            apis_status[name] = {"status": "‚ùå No accesible", "error": str(e)}

    return apis_status


def check_libraries():
    """Verifica la disponibilidad de las bibliotecas necesarias"""
    libraries = {
        "pandas": "An√°lisis de datos",
        "numpy": "Operaciones num√©ricas",
        "yfinance": "Datos de Yahoo Finance",
        "plotly": "Visualizaci√≥n",
        "streamlit": "Interfaz de usuario",
        "ta": "Indicadores t√©cnicos",
        "sklearn": "Machine Learning",
        "scipy": "C√°lculos cient√≠ficos",
        "statsmodels": "An√°lisis estad√≠stico",
        "requests": "API HTTP",
        "pytz": "Zonas horarias",
        "openai": "Inteligencia artificial",
    }

    libraries_status = {}

    for lib, description in libraries.items():
        try:
            # Intentar importar la biblioteca
            module = importlib.import_module(lib)
            version = getattr(module, "__version__", "versi√≥n desconocida")
            libraries_status[lib] = {
                "status": "‚úÖ Instalada",
                "version": version,
                "description": description,
            }
        except ImportError:
            libraries_status[lib] = {
                "status": "‚ùå No instalada",
                "description": description,
            }
        except Exception as e:
            libraries_status[lib] = {
                "status": "‚ö†Ô∏è Error",
                "error": str(e),
                "description": description,
            }

    return libraries_status


def display_system_status():
    """Muestra el estado del sistema, APIs y librer√≠as"""
    st.header("üõ†Ô∏è Estado del Sistema")

    # Informaci√≥n del sistema
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Informaci√≥n del Sistema")
        st.write(f"**Python versi√≥n:** {sys.version.split(' ')[0]}")
        st.write(f"**Streamlit versi√≥n:** {st.__version__}")
        st.write(f"**Fecha y hora:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

    with col2:
        st.subheader("Estado de la Cach√©")
        try:
            from market_utils import _data_cache

            cache_stats = _data_cache.get_stats()
            st.write(f"**Entradas en cach√©:** {cache_stats.get('entradas', 'N/A')}")
            st.write(f"**Hit rate:** {cache_stats.get('hit_rate', 'N/A')}")
            st.write(
                f"**Hits/Misses:** {cache_stats.get('hits', 0)}/{cache_stats.get('misses', 0)}"
            )
        except Exception as e:
            st.write("**Error accediendo a estad√≠sticas de cach√©:**", str(e))

    # Estado de APIs
    st.subheader("Estado de APIs")
    apis_status = check_api_keys()

    # Crear tabla de estados de API
    api_data = []
    for api, details in apis_status.items():
        row = {"API/Key": api}
        row.update(details)
        api_data.append(row)

    # Mostrar como dataframe
    if api_data:
        api_df = pd.DataFrame(api_data)
        st.dataframe(api_df, use_container_width=True)
    else:
        st.warning("No se pudo obtener informaci√≥n de APIs")

    # Estado de librer√≠as
    st.subheader("Estado de Librer√≠as")
    libraries_status = check_libraries()

    # Crear tabla de estados de librer√≠as
    lib_data = []
    for lib, details in libraries_status.items():
        row = {"Librer√≠a": lib}
        row.update(details)
        lib_data.append(row)

    # Mostrar como dataframe
    if lib_data:
        lib_df = pd.DataFrame(lib_data)
        st.dataframe(lib_df, use_container_width=True)
    else:
        st.warning("No se pudo obtener informaci√≥n de librer√≠as")

    # Prueba de conexi√≥n a datos
    st.subheader("Prueba de Datos")
    try:
        with st.spinner("Probando acceso a datos de mercado..."):
            test_data = fetch_market_data("SPY", "2d")
            if test_data is not None and not test_data.empty:
                st.success(f"‚úÖ Datos disponibles para SPY: {len(test_data)} registros")
                st.dataframe(test_data.tail(3), use_container_width=True)
            else:
                st.error("‚ùå No se pudieron obtener datos para SPY")
    except Exception as e:
        st.error(f"‚ùå Error en prueba de datos: {str(e)}")


# =================================================
# FUNCIONES DE AUTENTICACI√ìN Y SEGURIDAD
# =================================================


def check_authentication():
    """Verifica autenticaci√≥n del usuario"""
    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False

    if not st.session_state.authenticated:
        st.title("üîí InversorIA Pro - Terminal Institucional")

        st.markdown(
            """
        ### Plataforma Profesional de Trading
        
        InversorIA Pro es una terminal avanzada de trading que ofrece:
        
        - üìä An√°lisis t√©cnico multi-timeframe
        - üéØ Estrategias de volatilidad y opciones
        - üìà Surface analytics y volatilidad impl√≠cita
        - ‚ö†Ô∏è Gesti√≥n de riesgo institucional
        - ü§ñ Trading algor√≠tmico
        
        #### Acceso Restringido
        Esta plataforma est√° dise√±ada para uso institucional y requiere autenticaci√≥n.
        """
        )

        password = st.text_input("Ingrese su contrase√±a de acceso", type="password")

        if st.button("Acceder"):
            if check_password(password):
                st.session_state.authenticated = True
                st.session_state.show_system_status = (
                    True  # Mostrar status de sistema al iniciar sesi√≥n
                )
                st.rerun()

        st.markdown("---")
        st.markdown("¬© 2025 InversorIA Pro | Plataforma Institucional de Trading")

        return False

    if not validate_session():
        clear_session()
        st.rerun()

    return True


# =================================================
# FUNCIONES DE ASISTENTE MEJORADAS
# =================================================


def process_chat_input_with_openai(
    prompt, symbol=None, api_key=None, assistant_id=None
):
    """
    Procesa la entrada del chat utilizando OpenAI para respuestas m√°s naturales y variadas.
    """
    try:
        # Si no se proporciona s√≠mbolo, intentar detectarlo en el mensaje
        if not symbol:
            words = prompt.split()
            for word in words:
                word = word.strip(",.?!").upper()
                for category, symbols in SYMBOLS.items():
                    if word in symbols:
                        symbol = word
                        break

            if not symbol:
                symbol = st.session_state.get("current_symbol", "SPY")

        # Verificar si OpenAI est√° configurado correctamente
        if not api_key:
            # Modo fallback: generar respuesta basada en an√°lisis local
            return fallback_analyze_symbol(symbol, prompt)

        # Obtener contexto actualizado del mercado
        context = get_market_context(symbol)
        if not context or "error" in context:
            return f"‚ùå Error: No se pudo obtener el contexto de mercado para {symbol}."

        # Formatear el contexto para incluirlo en el mensaje
        price = context.get("last_price", 0)
        change = context.get("change_percent", 0)
        vix_level = context.get("vix_level", "N/A")

        # Crear una versi√≥n resumida del contexto
        context_summary = f"""
        Contexto actual: {symbol} a ${price:.2f} ({change:+.2f}%), VIX: {vix_level}
        """

        # Si tenemos un assistant_id, usar la API de asistentes
        if assistant_id:
            return process_with_assistant(prompt, symbol, context, assistant_id)
        else:
            # Usar la API de Chat Completion directamente
            return process_with_chat_completion(prompt, symbol, context, api_key)

    except Exception as e:
        return f"Error procesando consulta: {str(e)}"


def process_with_assistant(prompt, symbol, context, assistant_id):
    """Procesa el mensaje utilizando la API de Asistentes de OpenAI"""
    try:
        # Crear thread si no existe
        if "thread_id" not in st.session_state:
            thread = openai.beta.threads.create()
            st.session_state.thread_id = thread.id

        # Formatear contexto para el mensaje
        price = context.get("last_price", 0)
        change = context.get("change_percent", 0)
        vix_level = context.get("vix_level", "N/A")

        signals = context.get("signals", {})

        # Obtener se√±al general
        overall_signal = "NEUTRAL"
        if "overall" in signals:
            signal = signals["overall"]["signal"]
            if signal in ["compra", "compra_fuerte"]:
                overall_signal = "ALCISTA"
            elif signal in ["venta", "venta_fuerte"]:
                overall_signal = "BAJISTA"

        # Obtener se√±al de opciones
        option_signal = "NEUTRAL"
        if "options" in signals:
            option_signal = signals["options"]["direction"]

        # Crear mensaje enriquecido con contexto
        context_prompt = f"""
        Consulta sobre {symbol} a ${price:.2f} ({'+' if change > 0 else ''}{change:.2f}%):
        
        Se√±ales t√©cnicas actuales:
        - Tendencia general: {overall_signal}
        - Se√±al de opciones: {option_signal}
        - VIX: {vix_level}
        
        Pregunta del usuario: {prompt}
        """

        # Crear mensaje en el thread
        thread_messages = openai.beta.threads.messages.create(
            thread_id=st.session_state.thread_id, role="user", content=context_prompt
        )

        # Ejecutar con herramientas
        run = openai.beta.threads.runs.create(
            thread_id=st.session_state.thread_id, assistant_id=assistant_id, tools=tools
        )

        # Monitorear la ejecuci√≥n
        with st.spinner("Analizando mercado y generando respuesta..."):
            while True:
                run = openai.beta.threads.runs.retrieve(
                    thread_id=st.session_state.thread_id, run_id=run.id
                )

                # Verificar estado de ejecuci√≥n
                if run.status == "completed":
                    break
                elif run.status == "requires_action":
                    # Procesar llamadas a herramientas
                    tool_outputs = process_tool_calls(
                        run.required_action.submit_tool_outputs.tool_calls, symbol
                    )

                    # Enviar resultados
                    run = openai.beta.threads.runs.submit_tool_outputs(
                        thread_id=st.session_state.thread_id,
                        run_id=run.id,
                        tool_outputs=tool_outputs,
                    )
                elif run.status in ["failed", "cancelled", "expired"]:
                    return f"Error en la ejecuci√≥n: {run.status}"

                # Peque√±a pausa para no sobrecargar la API
                time.sleep(0.5)

            # Obtener mensajes actualizados
            messages = openai.beta.threads.messages.list(
                thread_id=st.session_state.thread_id
            )

            # Encontrar respuesta del asistente
            for message in messages:
                if message.run_id == run.id and message.role == "assistant":
                    # Extraer texto de la respuesta
                    if hasattr(message.content[0], "text"):
                        return message.content[0].text.value
                    else:
                        return "Error: Formato de respuesta no reconocido"

        return "No se pudo obtener una respuesta del asistente."

    except Exception as e:
        st.error(f"Error en process_with_assistant: {str(e)}")
        # En caso de error, caer en el modo fallback
        return fallback_analyze_symbol(symbol, prompt)


def process_with_chat_completion(prompt, symbol, context, api_key):
    """Procesa el mensaje utilizando la API de Chat Completion de OpenAI"""
    try:
        # Formatear contexto para el mensaje
        price = context.get("last_price", 0)
        change = context.get("change_percent", 0)
        vix_level = context.get("vix_level", "N/A")

        signals = context.get("signals", {})
        support_resistance = context.get("support_resistance", {})

        # Preparar contexto resumido para el sistema
        system_prompt = """
        Eres un especialista en trading y an√°lisis t√©cnico avanzado con m√°s de 8 a√±os de experiencia en trading institucional. 
        Tu expertise incluye an√°lisis t√©cnico, estrategias de opciones, volatilidad, y gesti√≥n de riesgo. 
        Proporciona an√°lisis claros, concisos y profesionales basados en los datos de mercado actuales.
        
        Cuando analices activos, considera:
        1. Tendencias de precios y patrones
        2. Indicadores t√©cnicos (RSI, MACD, medias m√≥viles)
        3. Niveles de soporte y resistencia
        4. Volatilidad del mercado y condiciones generales
        5. Estrategias de opciones recomendadas
        
        No te limites a repetir las se√±ales autom√°ticas. Aporta tu an√°lisis profesional, busca divergencias y patrones que los indicadores b√°sicos podr√≠an no capturar. Tu valor est√° en proporcionar una perspectiva √∫nica basada en tu experiencia.
        """

        # Preparar un contexto m√°s detallado pero conciso para usar como mensaje
        context_message = f"""
        Contexto actual para {symbol}:
        - Precio: ${price:.2f} ({change:+.2f}%)
        - VIX: {vix_level}
        
        Se√±ales t√©cnicas:
        - Tendencia general: {signals.get('overall', {}).get('signal', 'N/A')}
        - Confianza: {signals.get('overall', {}).get('confidence', 'N/A')}
        - Recomendaci√≥n opciones: {signals.get('options', {}).get('direction', 'N/A')}
        
        Principales niveles:
        - Resistencias: {', '.join([f"${r:.2f}" for r in support_resistance.get('resistances', [])[:2]])}
        - Soportes: {', '.join([f"${s:.2f}" for s in support_resistance.get('supports', [])[:2]])}
        """

        # Crear mensajes para la API
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": context_message},
            {"role": "user", "content": prompt},
        ]

        # Realizar llamada a la API
        response = openai.chat.completions.create(
            model="gpt-4-turbo-preview",  # Usar el modelo m√°s avanzado
            messages=messages,
            temperature=0.7,  # Balancear creatividad y precisi√≥n
            max_tokens=1000,  # Respuesta detallada pero no excesiva
        )

        # Extraer la respuesta
        return response.choices[0].message.content

    except Exception as e:
        st.error(f"Error en process_with_chat_completion: {str(e)}")
        # En caso de error, caer en el modo fallback
        return fallback_analyze_symbol(symbol, prompt)


def fallback_analyze_symbol(symbol, question=None):
    """Funci√≥n de respaldo para analizar s√≠mbolos cuando OpenAI no est√° disponible"""
    try:
        context = get_market_context(symbol)
        if context and "error" not in context:
            # Extraer informaci√≥n relevante
            price = context.get("last_price", 0)
            change = context.get("change_percent", 0)
            signals = context.get("signals", {})

            # Determinar se√±al general
            overall_signal = "NEUTRAL"
            if "overall" in signals:
                signal = signals["overall"]["signal"]
                if signal in ["compra", "compra_fuerte"]:
                    overall_signal = "ALCISTA"
                elif signal in ["venta", "venta_fuerte"]:
                    overall_signal = "BAJISTA"

            # Determinar recomendaci√≥n de opciones
            option_signal = "NEUTRAL"
            option_strategy = "N/A"
            if "options" in signals:
                option_signal = signals["options"]["direction"]
                option_strategy = signals["options"]["strategy"]

            # Analizar niveles clave
            support_resistance = context.get("support_resistance", {})

            # Construir respuesta b√°sica (modo de respaldo)
            response = f"## An√°lisis de {symbol} a ${price:.2f} ({change:+.2f}%)\n\n"

            # Determinar una respuesta m√°s personalizada basada en la pregunta si est√° disponible
            if question:
                question_lower = question.lower()

                if any(
                    term in question_lower
                    for term in ["an√°lisis", "resumen", "general", "situaci√≥n"]
                ):
                    response += f"### An√°lisis General\n\n"
                    response += f"El activo {symbol} muestra una tendencia **{overall_signal}** en este momento. "

                    if "trend" in signals:
                        trend = signals["trend"]
                        response += f"Los indicadores de tendencia muestran: "
                        response += f"SMA 20-50 {trend.get('sma_20_50', 'N/A')}, "
                        response += f"MACD {trend.get('macd', 'N/A')}, "
                        response += (
                            f"y est√° {trend.get('sma_200', 'N/A')} de su SMA 200.\n\n"
                        )

                    response += f"### Recomendaci√≥n de Trading\n\n"
                    if overall_signal == "ALCISTA":
                        response += f"Se recomienda considerar posiciones **LONG** con gesti√≥n adecuada del riesgo. "
                        response += f"Para opciones, la estrategia sugerida es **{option_signal}** con enfoque en {option_strategy}.\n\n"
                    elif overall_signal == "BAJISTA":
                        response += f"Se recomienda considerar posiciones **SHORT** con gesti√≥n adecuada del riesgo. "
                        response += f"Para opciones, la estrategia sugerida es **{option_signal}** con enfoque en {option_strategy}.\n\n"
                    else:
                        response += f"Se recomienda **NEUTRAL/CAUTELA** hasta una se√±al m√°s clara. "
                        response += f"Para opciones, considerar estrategias de volatilidad no direccionales.\n\n"

                elif any(
                    term in question_lower
                    for term in ["nivel", "soporte", "resistencia", "precio", "target"]
                ):
                    response += f"### Niveles Clave para {symbol}\n\n"

                    if (
                        "resistances" in support_resistance
                        and support_resistance["resistances"]
                    ):
                        resistances = sorted(support_resistance["resistances"])
                        response += "**Resistencias clave:**\n"
                        for i, level in enumerate(resistances[:3]):
                            distance = ((level / price) - 1) * 100
                            response += f"- R{i+1}: ${level:.2f} ({distance:+.2f}% desde precio actual)\n"

                    response += "\n"

                    if (
                        "supports" in support_resistance
                        and support_resistance["supports"]
                    ):
                        supports = sorted(support_resistance["supports"], reverse=True)
                        response += "**Soportes clave:**\n"
                        for i, level in enumerate(supports[:3]):
                            distance = ((level / price) - 1) * 100
                            response += f"- S{i+1}: ${level:.2f} ({distance:+.2f}% desde precio actual)\n"

                    response += "\n"
                    response += f"Estos niveles son significativos para planificar entradas, salidas y gesti√≥n de riesgo. "
                    response += f"Considerar stop loss por debajo del soporte m√°s cercano para posiciones largas, "
                    response += f"o por encima de la resistencia m√°s cercana para posiciones cortas."

                elif any(
                    term in question_lower
                    for term in ["opcion", "opciones", "call", "put", "derivado"]
                ):
                    response += f"### An√°lisis de Opciones para {symbol}\n\n"

                    if "options" in signals:
                        options = signals["options"]
                        response += f"**Direcci√≥n recomendada: {options.get('direction', 'N/A')}**\n"
                        response += (
                            f"**Estrategia: {options.get('strategy', 'N/A')}**\n"
                        )
                        response += (
                            f"**Confianza: {options.get('confidence', 'N/A')}**\n"
                        )
                        response += (
                            f"**Timeframe: {options.get('timeframe', 'N/A')}**\n\n"
                        )

                    if "options_params" in context:
                        params = context["options_params"]
                        response += "**Par√°metros recomendados:**\n"
                        for param, value in params.items():
                            response += f"- {param}: {value}\n"

                    if "volatility_adjustments" in context:
                        vix = context.get("vix_level", 0)
                        vol_state = (
                            "ALTA" if vix > 25 else "BAJA" if vix < 15 else "NORMAL"
                        )

                        response += f"\nCon VIX en {vix:.2f} (Volatilidad {vol_state}), se recomienda:\n"

                        if vix > 25:
                            response += (
                                "- Considerar spreads en lugar de opciones simples\n"
                            )
                            response += "- Reducir el tama√±o de posici√≥n\n"
                            response += "- Strike m√°s alejado para mayor seguridad\n"
                        elif vix < 15:
                            response += "- Estrategias direccionales simples\n"
                            response += "- Strike cercano al precio actual\n"
                            response += "- Considerar vencimientos m√°s largos\n"
                        else:
                            response += "- Par√°metros est√°ndar\n"
                            response += (
                                "- Balance entre riesgo y recompensa tradicional\n"
                            )

                elif any(
                    term in question_lower
                    for term in ["rsi", "momentum", "indicador", "t√©cnico", "macd"]
                ):
                    response += f"### Indicadores T√©cnicos para {symbol}\n\n"

                    if "momentum" in signals:
                        momentum = signals["momentum"]
                        rsi = momentum.get("rsi", 0)
                        condition = momentum.get("rsi_condition", "N/A")

                        response += f"**RSI:** {rsi:.1f} ({condition})\n"
                        response += (
                            f"**Tendencia RSI:** {momentum.get('rsi_trend', 'N/A')}\n"
                        )

                        if "stoch_k" in momentum and "stoch_d" in momentum:
                            response += f"**Estoc√°stico:** %K={momentum['stoch_k']:.1f}, %D={momentum['stoch_d']:.1f}\n"

                    if "trend" in signals:
                        trend = signals["trend"]
                        response += f"\n**Indicadores de Tendencia:**\n"
                        response += f"- SMA 20-50: {trend.get('sma_20_50', 'N/A')}\n"
                        response += f"- MACD: {trend.get('macd', 'N/A')}\n"
                        response += f"- EMA Trend: {trend.get('ema_trend', 'N/A')}\n"
                        response += (
                            f"- Posici√≥n vs SMA 200: {trend.get('sma_200', 'N/A')}\n"
                        )

                    if "volatility" in signals:
                        volatility = signals["volatility"]
                        response += f"\n**Indicadores de Volatilidad:**\n"
                        response += f"- BB Width: {volatility.get('bb_width', 0):.3f}\n"
                        response += f"- ATR: {volatility.get('atr', 0):.3f}\n"
                        response += f"- Posici√≥n del precio: {volatility.get('price_position', 'N/A')}\n"
                        response += f"- Estado de volatilidad: {volatility.get('volatility_state', 'N/A')}\n"

                elif any(
                    term in question_lower
                    for term in ["timeframe", "plazo", "corto", "largo", "medio"]
                ):
                    response += f"### An√°lisis Multi-Timeframe para {symbol}\n\n"

                    if "multi_timeframe" in context:
                        multi_tf = context["multi_timeframe"]
                        if "consolidated" in multi_tf:
                            cons = multi_tf["consolidated"]
                            response += f"**Se√±al consolidada: {cons.get('signal', 'N/A').upper()}**\n"
                            response += (
                                f"**Confianza: {cons.get('confidence', 'N/A')}**\n"
                            )
                            response += f"**Alineaci√≥n de timeframes: {cons.get('timeframe_alignment', 'N/A')}**\n"
                            response += f"**Recomendaci√≥n: {cons.get('options_recommendation', 'N/A')}**\n\n"

                        response += "**An√°lisis por timeframe:**\n\n"

                        for tf, analysis in multi_tf.items():
                            if (
                                tf != "consolidated"
                                and isinstance(analysis, dict)
                                and "overall" in analysis
                            ):
                                response += (
                                    f"**{tf}:** {analysis['overall']['signal']} "
                                )
                                response += f"({analysis['overall']['confidence']})"
                                if "options" in analysis:
                                    response += f" ‚Üí Opciones: {analysis['options']['direction']}\n"
                                else:
                                    response += "\n"
                    else:
                        response += "Informaci√≥n multi-timeframe no disponible para este activo."

                else:
                    # Si la pregunta no tiene t√©rminos espec√≠ficos, dar un resumen general
                    response += f"### An√°lisis T√©cnico {symbol}\n\n"
                    response += f"El an√°lisis actual muestra una tendencia **{overall_signal}** con una se√±al de opciones **{option_signal}**.\n\n"

                    if "momentum" in signals:
                        momentum = signals["momentum"]
                        rsi = momentum.get("rsi", 0)
                        condition = momentum.get("rsi_condition", "N/A")
                        response += f"**RSI:** {rsi:.1f} ({condition})\n"

                    if (
                        "supports" in support_resistance
                        and "resistances" in support_resistance
                    ):
                        supports = sorted(support_resistance["supports"], reverse=True)[
                            :1
                        ]
                        resistances = sorted(support_resistance["resistances"])[:1]

                        if supports:
                            support = supports[0]
                            support_dist = ((support / price) - 1) * 100
                            response += f"**Soporte clave:** ${support:.2f} ({support_dist:+.2f}%)\n"

                        if resistances:
                            resistance = resistances[0]
                            resistance_dist = ((resistance / price) - 1) * 100
                            response += f"**Resistencia clave:** ${resistance:.2f} ({resistance_dist:+.2f}%)\n"

                    response += f"\nPara informaci√≥n espec√≠fica, puedes preguntar sobre tendencia, opciones, RSI, volatilidad o niveles de soporte/resistencia."
            else:
                # Si no hay pregunta, dar un resumen est√°ndar
                response += f"### Se√±al General: {overall_signal}\n"
                if "overall" in signals:
                    confidence = signals["overall"]["confidence"]
                    response += f"Confianza: {confidence}\n\n"

                response += f"### Recomendaci√≥n de Opciones: {option_signal}\n"
                response += f"Estrategia: {option_strategy}\n\n"

                response += "### Niveles Clave\n"
                if (
                    "resistances" in support_resistance
                    and support_resistance["resistances"]
                ):
                    resistances = sorted(support_resistance["resistances"])[:2]
                    response += "**Resistencias:**\n"
                    for i, level in enumerate(resistances):
                        distance = ((level / price) - 1) * 100
                        response += f"- R{i+1}: ${level:.2f} ({distance:+.2f}%)\n"

                if "supports" in support_resistance and support_resistance["supports"]:
                    supports = sorted(support_resistance["supports"], reverse=True)[:2]
                    response += "**Soportes:**\n"
                    for i, level in enumerate(supports):
                        distance = ((level / price) - 1) * 100
                        response += f"- S{i+1}: ${level:.2f} ({distance:+.2f}%)\n"

            return response

        else:
            error_msg = (
                context.get("error", "Error desconocido")
                if context
                else "No hay datos disponibles"
            )
            return f"‚ùå No se pudo analizar {symbol}: {error_msg}"

    except Exception as e:
        return f"‚ùå Error analizando {symbol}: {str(e)}"


# =================================================
# FUNCIONES DE SESI√ìN
# =================================================


def initialize_session_state():
    """Inicializa el estado de la sesi√≥n"""
    # Estado para OpenAI
    if "openai_configured" not in st.session_state:
        api_key, assistant_id = setup_openai()
        st.session_state.openai_api_key = api_key
        st.session_state.assistant_id = assistant_id
        st.session_state.openai_configured = bool(api_key)

    # Estado para chat
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Estado para thread de OpenAI
    if "thread_id" not in st.session_state and st.session_state.get(
        "openai_configured"
    ):
        try:
            thread = openai.beta.threads.create()
            st.session_state.thread_id = thread.id
        except Exception as e:
            st.error(f"Error creando thread: {str(e)}")
            st.session_state.thread_id = None

    # Estado para activos seleccionados
    if "current_symbol" not in st.session_state:
        st.session_state.current_symbol = "SPY"

    if "current_timeframe" not in st.session_state:
        st.session_state.current_timeframe = "1d"

    # Estado para sesi√≥n de usuario
    if "session_start" not in st.session_state:
        st.session_state.session_start = datetime.now()

    # Comprobar APIs una sola vez al iniciar
    if "show_system_status" not in st.session_state:
        st.session_state.show_system_status = True


def render_sidebar():
    """Renderiza el panel lateral con informaci√≥n profesional"""
    with st.sidebar:
        st.title("üßë‚Äçüíª Trading Specialist Pro")

        st.markdown(
            """
        ## Perfil Profesional
        Analista t√©cnico y estratega de mercados con especializaci√≥n en derivados financieros y m√°s de 8 a√±os de experiencia en trading institucional. Experto en el desarrollo e implementaci√≥n de estrategias cuantitativas, an√°lisis de volatilidad y gesti√≥n de riesgo algor√≠tmica. Capacidad demostrada para integrar an√°lisis t√©cnico avanzado con fundamentos macroecon√≥micos.

        ## √Åreas de Especializaci√≥n Principal
        - Estrategias avanzadas de opciones y volatilidad
        - Trading sistem√°tico y algor√≠tmico
        - An√°lisis t√©cnico y cuantitativo
        - Gesti√≥n de riesgo din√°mica
        - Market Making y liquidez

        ## Competencias T√©cnicas Avanzadas
        - Modelado avanzado de volatilidad y superficies de volatilidad
        - An√°lisis de flujo de opciones y order flow
        - Desarrollo de indicadores propietarios
        - Machine Learning aplicado a trading
        - An√°lisis de microestructura de mercado
        """
        )

        st.markdown("---")

        # Informaci√≥n de mercado
        try:
            st.subheader("üìä Estado del Mercado")

            # Obtener VIX
            vix_level = get_vix_level()

            # Determinar sesi√≥n de mercado
            now = datetime.now()

            hour = now.hour
            weekday = now.weekday()

            if weekday >= 5:  # Fin de semana
                session = "CERRADO"
            elif 4 <= hour < 9:
                session = "PRE-MARKET"
            elif 9 <= hour < 16:
                session = "REGULAR"
            elif 16 <= hour < 20:
                session = "AFTER-HOURS"
            else:
                session = "CERRADO"

            col1, col2 = st.columns(2)
            with col1:
                st.metric(
                    "VIX",
                    f"{vix_level:.2f}",
                    delta=(
                        "Volatilidad Alta"
                        if vix_level > 25
                        else "Volatilidad Baja" if vix_level < 15 else "Normal"
                    ),
                    delta_color=(
                        "inverse"
                        if vix_level > 25
                        else "normal" if vix_level < 15 else "off"
                    ),
                )
            with col2:
                st.metric("Sesi√≥n", session, now.strftime("%H:%M:%S"))

            # Mercados principales como referencia
            try:
                spy_data = fetch_market_data("SPY", "2d")
                qqq_data = fetch_market_data("QQQ", "2d")

                if not spy_data.empty and not qqq_data.empty:
                    spy_change = (
                        (spy_data["Close"].iloc[-1] / spy_data["Close"].iloc[-2]) - 1
                    ) * 100
                    qqq_change = (
                        (qqq_data["Close"].iloc[-1] / qqq_data["Close"].iloc[-2]) - 1
                    ) * 100

                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric(
                            "S&P 500",
                            f"${spy_data['Close'].iloc[-1]:.2f}",
                            f"{spy_change:.2f}%",
                            delta_color="normal" if spy_change >= 0 else "inverse",
                        )
                    with col2:
                        st.metric(
                            "NASDAQ",
                            f"${qqq_data['Close'].iloc[-1]:.2f}",
                            f"{qqq_change:.2f}%",
                            delta_color="normal" if qqq_change >= 0 else "inverse",
                        )
            except Exception as e:
                st.warning("No se pudieron cargar datos de referencia")

        except Exception as ex:
            st.warning("No se pudo obtener informaci√≥n de mercado")

        st.markdown("---")

        # Acciones r√°pidas
        st.subheader("‚öôÔ∏è Acciones")

        col1, col2 = st.columns(2)

        with col1:
            if st.button(
                "üîÑ Limpiar Cach√©",
                help="Limpiar cach√© de datos para obtener informaci√≥n actualizada",
                use_container_width=True,
            ):
                cleared = clear_cache()
                st.success(f"Cach√© limpiado: {cleared} entradas eliminadas")
                time.sleep(1)
                st.rerun()

            if st.button(
                "üñ•Ô∏è Estado Sistema",
                help="Mostrar estado del sistema, APIs y librer√≠as",
                use_container_width=True,
            ):
                st.session_state.show_system_status = True
                st.rerun()

        with col2:
            if st.button(
                "üßπ Limpiar Chat",
                help="Borrar historial de chat",
                use_container_width=True,
            ):
                st.session_state.messages = []

                # Crear nuevo thread si OpenAI est√° disponible
                if st.session_state.get("openai_configured"):
                    try:
                        thread = openai.beta.threads.create()
                        st.session_state.thread_id = thread.id
                    except:
                        pass

                st.rerun()

            # Bot√≥n de cierre de sesi√≥n
            if st.button(
                "üîí Cerrar Sesi√≥n",
                help="Cerrar sesi√≥n actual",
                use_container_width=True,
            ):
                clear_session()
                st.rerun()

        # Informaci√≥n de sesi√≥n
        st.markdown("---")
        if "session_start" in st.session_state:
            session_duration = datetime.now() - st.session_state.session_start
            hours, remainder = divmod(session_duration.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            st.caption(f"Sesi√≥n activa: {hours}h {minutes}m {seconds}s")

            # Mostrar estado de OpenAI
            if st.session_state.get("openai_configured"):
                st.caption("‚úÖ OpenAI conectado")
            else:
                st.caption("‚ö†Ô∏è OpenAI no configurado - Chat en modo b√°sico")

        st.caption("InversorIA Pro v1.0 | ¬© 2025")


# =================================================
# FUNCI√ìN PRINCIPAL
# =================================================


def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    try:
        # Verificar autenticaci√≥n primero
        if not check_authentication():
            return

        # Inicializaci√≥n para usuario autenticado
        initialize_session_state()

        # Mostrar el estado del sistema al iniciar sesi√≥n y luego desactivarlo
        if st.session_state.get("show_system_status", False):
            display_system_status()
            # Bot√≥n para cerrar el panel de estado
            if st.button("Continuar al Dashboard", use_container_width=True):
                st.session_state.show_system_status = False
                st.rerun()
            return

        # Renderizar sidebar despu√©s de mostrar el estado del sistema
        render_sidebar()

        # Panel principal
        st.title("üíπ An√°lisis Profesional de Trading")

        # Selecci√≥n de activo
        col_cat, col_sym, col_tf = st.columns([1, 1, 1])
        with col_cat:
            category = st.selectbox(
                "Sector", list(SYMBOLS.keys()), key="category_selector"
            )
        with col_sym:
            symbol = st.selectbox("Activo", SYMBOLS[category], key="symbol_selector")
        with col_tf:
            timeframe = st.selectbox(
                "Timeframe",
                ["1d", "1wk", "1mo"],
                key="timeframe_selector",
                index=["1d", "1wk", "1mo"].index(st.session_state.current_timeframe),
            )

        # Actualizar s√≠mbolo actual si cambia
        if symbol != st.session_state.current_symbol:
            st.session_state.current_symbol = symbol

            # Crear nuevo thread para OpenAI si cambi√≥ el s√≠mbolo
            if st.session_state.get("openai_configured"):
                try:
                    thread = openai.beta.threads.create()
                    st.session_state.thread_id = thread.id
                except:
                    pass

        # Actualizar timeframe si cambia
        if timeframe != st.session_state.current_timeframe:
            st.session_state.current_timeframe = timeframe

        # Panel de Contenido y Chat
        col1, col2 = st.columns([2, 1])

        # Panel de Dashboard en columna 1
        with col1:
            # Pesta√±as para diferentes vistas
            tab1, tab2, tab3 = st.tabs(
                ["üìà An√°lisis T√©cnico", "üéØ Opciones", "‚è±Ô∏è Multi-Timeframe"]
            )

            with tab1:
                render_technical_tab(symbol, timeframe)

            with tab2:
                render_options_tab(symbol)

            with tab3:
                render_multiframe_tab(symbol)

        # Panel de Chat en columna 2
        with col2:
            st.header("üí¨ Trading Specialist")

            # Mostrar tarjeta de contexto
            context = get_market_context(symbol)

            if context and "error" not in context:
                price = context.get("last_price", 0)
                change = context.get("change_percent", 0)
                signals = context.get("signals", {})

                # Determinar se√±al de opciones
                option_signal = "NEUTRAL"
                option_strategy = "N/A"
                if "options" in signals:
                    option_signal = signals["options"]["direction"]
                    option_strategy = signals["options"]["strategy"]

                # Colores din√°micos seg√∫n se√±al
                signal_color = "gray"
                if option_signal == "CALL":
                    signal_color = "green"
                elif option_signal == "PUT":
                    signal_color = "red"

                # Mostrar tarjeta con contexto actual
                st.markdown(
                    f"""
                <div style="background-color:rgba(70,70,70,0.2);padding:15px;border-radius:8px;margin-bottom:15px;border-left:5px solid {signal_color}">
                <h3 style="margin-top:0">{symbol} ${price:.2f} <span style="color:{'green' if change >= 0 else 'red'}">{change:+.2f}%</span></h3>
                <p><strong>Se√±al:</strong> <span style="color:{signal_color}">{option_signal}</span> ({option_strategy})</p>
                <p><strong>VIX:</strong> {context.get('vix_level', 'N/A')} | <strong>Volatilidad:</strong> {signals.get('volatility', {}).get('volatility_state', 'Normal')}</p>
                </div>
                """,
                    unsafe_allow_html=True,
                )

                # Mostrar badge del modo de chat
                if st.session_state.get("openai_configured"):
                    st.markdown(
                        """
                    <div style="display:inline-block;background-color:rgba(25,118,210,0.2);color:white;padding:4px 8px;border-radius:4px;font-size:0.8em;margin-bottom:10px">
                    ‚ú® Modo Avanzado con IA
                    </div>
                    """,
                        unsafe_allow_html=True,
                    )
                else:
                    st.markdown(
                        """
                    <div style="display:inline-block;background-color:rgba(128,128,128,0.2);color:white;padding:4px 8px;border-radius:4px;font-size:0.8em;margin-bottom:10px">
                    ‚ö†Ô∏è Modo B√°sico
                    </div>
                    """,
                        unsafe_allow_html=True,
                    )

            # Contenedor para mensajes de chat
            chat_container = st.container(height=500)

            with chat_container:
                # Mostrar mensajes existentes
                for message in st.session_state.messages:
                    with st.chat_message(message["role"]):
                        st.markdown(message["content"])

                # Campo de entrada para nuevos mensajes
                if prompt := st.chat_input("Pregunta sobre an√°lisis o trading..."):
                    # Agregar mensaje del usuario
                    st.session_state.messages.append(
                        {"role": "user", "content": prompt}
                    )

                    with st.chat_message("user"):
                        st.markdown(prompt)

                    # Generar y mostrar respuesta con OpenAI si est√° configurado
                    with st.spinner("Analizando..."):
                        if st.session_state.get("openai_configured"):
                            response = process_chat_input_with_openai(
                                prompt,
                                symbol,
                                st.session_state.openai_api_key,
                                st.session_state.assistant_id,
                            )
                        else:
                            # Usar modo fallback si OpenAI no est√° configurado
                            response = fallback_analyze_symbol(symbol, prompt)

                    # Agregar respuesta del asistente
                    st.session_state.messages.append(
                        {"role": "assistant", "content": response}
                    )

                    with st.chat_message("assistant"):
                        st.markdown(response)

            # Disclaimer
            st.markdown("---")
            st.caption(
                """
            **‚ö†Ô∏è Disclaimer:** Este sistema proporciona an√°lisis t√©cnico avanzado
            para fines informativos √∫nicamente. No constituye asesoramiento financiero 
            ni garantiza resultados. El trading conlleva riesgo significativo de p√©rdida.
            """
            )

    except Exception as e:
        st.error(f"Error en la aplicaci√≥n: {str(e)}")
        st.error(traceback.format_exc())


if __name__ == "__main__":
    main()
