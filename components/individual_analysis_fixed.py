"""
Componente de an√°lisis individual para InversorIA Pro
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime, timedelta
import logging
from market_utils import fetch_market_data, TechnicalAnalyzer, get_market_context
from visualization_utils import (
    display_asset_info,
    display_expert_opinion,
    display_sentiment_analysis,
    display_news_feed,
    display_web_insights,
    display_technical_summary,
)
from trading_dashboard import (
    render_technical_tab,
    render_options_tab,
    render_multiframe_tab,
    render_fundamental_tab,
    render_report_tab,
    render_risk_tab,
)

logger = logging.getLogger(__name__)

def render_individual_analysis():
    """
    Renderiza la pesta√±a de an√°lisis individual
    """
    st.markdown("## üìä An√°lisis Individual")
    
    # Obtener el s√≠mbolo actual
    symbol = st.session_state.current_symbol
    
    # Mostrar informaci√≥n b√°sica del activo
    display_asset_info(symbol)
    
    # Crear pesta√±as para diferentes tipos de an√°lisis
    tabs = st.tabs([
        "üìà An√°lisis T√©cnico",
        "üîÑ Opciones",
        "‚è±Ô∏è Multi-Timeframe",
        "üìä Fundamental",
        "üìù Reporte",
        "‚ö†Ô∏è Riesgo"
    ])
    
    # Obtener datos de mercado para el s√≠mbolo actual
    try:
        # Obtener datos hist√≥ricos
        days = st.session_state.get("history_days", 180)
        
        # Obtener datos de mercado
        df = fetch_market_data(symbol, period=f"{days}d")
        
        if df is not None and not df.empty:
            # Inicializar analizador t√©cnico
            analyzer = TechnicalAnalyzer(df)
            
            # Renderizar cada pesta√±a
            with tabs[0]:  # An√°lisis T√©cnico
                render_technical_tab(symbol, df)
                
            with tabs[1]:  # Opciones
                render_options_tab(symbol, df)
                
            with tabs[2]:  # Multi-Timeframe
                render_multiframe_tab(symbol)
                
            with tabs[3]:  # Fundamental
                render_fundamental_tab(symbol)
                
            with tabs[4]:  # Reporte
                render_report_tab(symbol, df)
                
            with tabs[5]:  # Riesgo
                render_risk_tab(symbol, df)
        else:
            st.error(f"No se pudieron obtener datos para {symbol}")
    except Exception as e:
        st.error(f"Error al analizar {symbol}: {str(e)}")
        logger.error(f"Error en an√°lisis individual: {str(e)}")
    
    # Mostrar an√°lisis del experto
    st.markdown("### üß† An√°lisis del Experto")
    try:
        display_expert_opinion(symbol)
    except Exception as e:
        st.error(f"Error al mostrar an√°lisis del experto: {str(e)}")
        logger.error(f"Error en display_expert_opinion: {str(e)}")
    
    # Mostrar an√°lisis de sentimiento y noticias
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### üì∞ Noticias Recientes")
        try:
            # Obtener noticias directamente
            st.info("Cargando noticias recientes...")
            st.write("Las noticias se cargar√°n en breve.")
        except Exception as e:
            st.error(f"Error al mostrar noticias: {str(e)}")
            logger.error(f"Error en display_news_feed: {str(e)}")
        
    with col2:
        st.markdown("### üåê Sentimiento de Mercado")
        try:
            # Mostrar sentimiento simplificado
            st.info("Cargando an√°lisis de sentimiento...")
            st.write("El an√°lisis de sentimiento se cargar√° en breve.")
        except Exception as e:
            st.error(f"Error al mostrar sentimiento: {str(e)}")
            logger.error(f"Error en display_sentiment_analysis: {str(e)}")
        
    # Mostrar resumen t√©cnico simplificado
    st.markdown("### üìä Resumen T√©cnico")
    try:
        st.info("Cargando resumen t√©cnico...")
        st.write("El resumen t√©cnico se cargar√° en breve.")
    except Exception as e:
        st.error(f"Error al mostrar resumen t√©cnico: {str(e)}")
        logger.error(f"Error en display_technical_summary: {str(e)}")
